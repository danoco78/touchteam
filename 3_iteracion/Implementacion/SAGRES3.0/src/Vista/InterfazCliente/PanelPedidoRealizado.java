/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelPedidoRealizado.java
 *
 * Created on 09-may-2010, 17:33:28
 */

package Vista.InterfazCliente;

import GestionCarta.Elemento;
import GestionPedidos.ElementoColaBar;
import GestionPedidos.ElementoColaCocina;
import GestionPedidos.ElementoPedido;
import GestionPedidos.Pedido;
import java.util.ArrayList;
import java.util.Iterator;
import utilidades.PanelEspacioVertical;

/**
 *
 * @author Carlos, Modificado por Sergio
 */
public class PanelPedidoRealizado extends javax.swing.JPanel {

    PanelGeneralCliente panelGeneralCliente;
    private ArrayList<Pedido> pedidosMostrandose;
    private int codMesa;
    /** Creates new form PanelPedidoRealizado */
    public PanelPedidoRealizado(PanelGeneralCliente panelGeneralCliente, int codMesa) {
        initComponents();
        this.panelGeneralCliente=panelGeneralCliente;
        this.codMesa=codMesa;
        this.pedidosMostrandose = null;
        this.actualizar();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollPanelPedido = new javax.swing.JScrollPane();
        PanelPedido = new javax.swing.JPanel();
        pMargenBoton = new javax.swing.JPanel();
        pMargenSuperiorBoton = new javax.swing.JPanel();
        BotonVerFactura = new javax.swing.JButton();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(200, 200));
        setLayout(new java.awt.BorderLayout());

        ScrollPanelPedido.setBorder(null);
        ScrollPanelPedido.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ScrollPanelPedido.setOpaque(false);

        PanelPedido.setBackground(new java.awt.Color(255, 255, 255));
        PanelPedido.setOpaque(false);
        PanelPedido.setLayout(new javax.swing.BoxLayout(PanelPedido, javax.swing.BoxLayout.Y_AXIS));
        ScrollPanelPedido.setViewportView(PanelPedido);

        add(ScrollPanelPedido, java.awt.BorderLayout.CENTER);

        pMargenBoton.setOpaque(false);
        pMargenBoton.setLayout(new java.awt.BorderLayout());

        pMargenSuperiorBoton.setOpaque(false);
        pMargenBoton.add(pMargenSuperiorBoton, java.awt.BorderLayout.NORTH);

        BotonVerFactura.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        BotonVerFactura.setForeground(new java.awt.Color(80, 98, 143));
        BotonVerFactura.setText("Ver Factura");
        BotonVerFactura.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 172, 229), 1, true));
        BotonVerFactura.setPreferredSize(new java.awt.Dimension(89, 50));
        BotonVerFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verFactura(evt);
            }
        });
        pMargenBoton.add(BotonVerFactura, java.awt.BorderLayout.CENTER);

        add(pMargenBoton, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void verFactura(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verFactura
        this.panelGeneralCliente.verFactura();
    }//GEN-LAST:event_verFactura


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonVerFactura;
    private javax.swing.JPanel PanelPedido;
    private javax.swing.JScrollPane ScrollPanelPedido;
    private javax.swing.JPanel pMargenBoton;
    private javax.swing.JPanel pMargenSuperiorBoton;
    // End of variables declaration//GEN-END:variables

    public void anadirPedido(ArrayList<Elemento> listaElementos, int codPedido, int estado) {
        this.PanelPedido.add(new PanelListaPedido(listaElementos, panelGeneralCliente, codPedido, estado));
        this.PanelPedido.add(new PanelEspacioVertical());
    }

    public int actualizar() {
        // Comprobamos si ha cambiado algun pedido
        ArrayList<Pedido> pedidos = this.panelGeneralCliente.icliente.obtienePedidosMesa(codMesa);
        if(pedidos == null){
            this.pedidosMostrandose = pedidos;
            this.PanelPedido.removeAll();
            this.panelGeneralCliente.volverAlInicio();
        }else if (pedidos != null &&
                (this.pedidosMostrandose == null ||
                this.compararListaPedidos(this.pedidosMostrandose, pedidos))) {
            this.pedidosMostrandose = pedidos;

            // Si ha cambiado, repintamos
            this.PanelPedido.removeAll();

            Iterator itPedidos = pedidos.iterator();
            boolean todosPagados = true;
            while (itPedidos.hasNext()) {
                Pedido pedido = (Pedido) itPedidos.next();
                ArrayList<ElementoPedido> listaElementosPedido = pedido.obtieneElementos();

                ArrayList<Elemento> listaElementos = new ArrayList();
                Iterator itElementos = listaElementosPedido.iterator();
                while (itElementos.hasNext()) {
                    ElementoPedido elementoPedido = (ElementoPedido) itElementos.next();
                    listaElementos.add(elementoPedido.getElemento());
                }

                if (pedido.getEstado() != Pedido.FACTURADO) {
                    ArrayList<ElementoPedido> elementos = pedido.getElementos();
                    Iterator<ElementoPedido> it = elementos.iterator();
                    boolean mostrar = false;
                    // Iteramos sobre todos los elementos, si todos han sido preparados...
                    // ...no lo mostramos en la interfaz
                    while (it.hasNext() && !mostrar) {
                        ElementoPedido ep = it.next();
                        if (ep instanceof ElementoColaBar) {
                            if (ep.getEstado() != ElementoColaBar.PREPARADO) {
                                mostrar = true;
                            }
                        } else if (ep instanceof ElementoColaCocina) {
                            if (ep.getEstado() != ElementoColaCocina.PREPARADO) {
                                mostrar = true;
                            }
                        }
                    }
                    if (mostrar) {
                        this.anadirPedido(listaElementos, pedido.getCodPedido(), pedido.getEstado());
                    }
                    todosPagados = false;
                }
                //this.panelGeneralCliente.eliminarPedido(pedido.getCodPedido(), false);
            }

            if (todosPagados == true) {
                this.panelGeneralCliente.volverAlInicio();
            } else {
                if (pedidos.size() == 0) {
                    this.BotonVerFactura.setEnabled(false);
                } else {
                    this.BotonVerFactura.setEnabled(true);
                }

                this.PanelPedido.repaint();
                this.PanelPedido.revalidate();
            }
        } else{
            System.gc();
        }
        
        return pedidos.size();
    }

    /**
     * Compara una lista de pedidos con la otra, devolviendo True si son distintas,
     * se deben respetar los parametros con las condiciones que se indican, de lo
     * contrario se puede devolver un resultado inesperado.
     * @param peds1 Conjunto de pedidos que se estan mostrando en la interfaz
     * @param peds2 Conjunto nuevo de pedidos a comparar
     * @return True si son distintas
     */
    private boolean compararListaPedidos(ArrayList<Pedido> peds1, ArrayList<Pedido> peds2) {
        if(peds1.size() != peds2.size()){
            return true;
        }
        Iterator<Pedido> it1 = peds1.iterator();
        while(it1.hasNext()){ // Recorremos los pedidos
            Pedido next1 = it1.next();
            Iterator<Pedido> it2 = peds2.iterator();

            boolean encontrado = false;
            Pedido next2 = null;
            while(it2.hasNext() && !encontrado){
                next2 = it2.next();
                if(next2.getCodPedido() == next1.getCodPedido() &&
                        next2.getCodMesa() == next1.getCodMesa()){
                    encontrado = true;
                }
            }
            if(!encontrado) return true;
            if(next1.getEstado() != next2.getEstado()) return true;
            // Comprobamos el estado de sus elementos, solo nos interesa si hay alguno
            // distinto y todos los de next2 son estan en estado PREPARADO
            ArrayList<ElementoPedido> elementos1 = next1.getElementos();
            ArrayList<ElementoPedido> elementos2 = next2.getElementos();
            if(elementos1.size() != elementos2.size()) return true;

            int estadosDistintos = 0,
                    estadosPreparados = 0;
            Iterator<ElementoPedido> itE1 = elementos1.iterator();
            while(itE1.hasNext()){
                ElementoPedido nextE1 = itE1.next();
                encontrado = false;
                Iterator<ElementoPedido> itE2 = elementos2.iterator();
                ElementoPedido nextE2 = null;
                while(itE2.hasNext() && !encontrado){
                    nextE2 = itE2.next();
                    if(nextE2.getCodElementoPedido() == nextE1.getCodElementoPedido()){
                        encontrado = true;
                    }
                }
                if(!encontrado) return true;
                // Sus estados son distintos
                if(nextE1.getEstado() != nextE2.getEstado()){
                    ++estadosDistintos;
                    // Si el segundo elemento esta preparado
                    if(nextE2 instanceof ElementoColaBar && nextE2.getEstado() == ElementoColaBar.PREPARADO)
                        ++estadosPreparados;
                    else if(nextE2 instanceof ElementoColaCocina && nextE2.getEstado() == ElementoColaCocina.PREPARADO)
                        ++estadosPreparados;
                }
            }// Hemos terminado de recorrer todos los elementos del pedido next1 respecto a su homologo en 2
            // Si habia con estados distintos y todos los nuevos están Preparado, hay que repintar.
            if(estadosDistintos > 0 && estadosDistintos == estadosPreparados)
                return true;

        }
        //System.out.println("No se actualiza!!");
        System.gc();
        return true;// TODO false;
    }

}
